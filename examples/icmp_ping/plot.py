#!/usr/bin/env python3

import csv
import argparse
import re
import numpy as np
import pandas as pd
import sys
from math import ceil
from itertools import chain

from os import listdir
from os.path import isfile, join

parser = argparse.ArgumentParser(
    prog='plot.py',
    description='Plot data generated by the datatypes benchmark',
    epilog='Report bugs to Pengcheng Xu <pengxu@ethz.ch>.'
)

parser.add_argument('--data_root', help='root of the CSV files from the datatypes benchmark', default=None)

args = parser.parse_args()

def cycles_to_us(cycles):
    return 1e6 / pspin_freq * cycles

pspin_freq = 40e6 # 40 MHz
dat_pkl = 'data.pkl'

icmp_baseline_label = 'ICMP Host'
icmp_pspin_label = 'ICMP FPsPIN'
icmp_combined_label = 'ICMP Host+FPsPIN'

udp_baseline_label = 'UDP Host'
udp_pspin_label = 'UDP FPsPIN'
udp_combined_label = 'UDP Host+FPsPIN'

def consume_trials(key, trials):
    # we do not distinguish host dma and notification here
    # since host is notified on every write
    def append_row(len, type, e2e, e2e_std, real_handler, host_dma, cycles):
        global data
        entry = pd.DataFrame.from_dict({
            'len': [len],
            'type': [type],
            'e2e': [e2e],
            'e2e_std': [e2e_std],
            'sender': [e2e - real_handler - host_dma - cycles],
            'real_handler': [real_handler],
            'host_dma': [host_dma],
            'cycles': [cycles],
        })
        data = pd.concat([data, entry], ignore_index=True)

    prot, trial = key.split(' ')

    for l in trials:
        real_handler, host_dma, all_cycles = 0, 0, 0

        if 'FPsPIN' in trial:
            do_host = 'true' if 'Host' in trial else 'false'
            txt_name = do_host

            with open(join(args.data_root, prot.lower(), f'{do_host}-{l}.csv'), 'r') as f:
                reader = csv.reader(f)
                assert next(reader) == ['handler', 'host_dma', 'cycles']
                icmp_handler, icmp_host_dma, cycles = [float(x) for x in next(reader)]

            real_handler = icmp_handler - cycles
            if do_host == 'true':
                real_handler -= icmp_host_dma - cycles
                host_dma = icmp_host_dma - cycles
                all_cycles = cycles * 5
            else:
                all_cycles = cycles * 3
        else:
            txt_name = 'baseline'

        with open(join(args.data_root, prot.lower(), f'{txt_name}-{l}-ping.txt'), 'r') as f:
            lines = f.readlines()
            if prot == 'ICMP':
                line = lines[4]
            elif prot == 'UDP': # dgping
                line = lines[3]
            values = [float(x) for x in line.split(' ')[3].split('/')]
            ping_avg = values[1]
            ping_std = values[3]
                
        append_row(int(l), key, ping_avg * 1000, ping_std * 1000,
                   cycles_to_us(real_handler),
                   cycles_to_us(host_dma),
                   cycles_to_us(all_cycles))

if args.data_root:
    trials = range(16, 1516, 100)
    data = pd.DataFrame(columns=[
        'len',
        'type',
        'e2e',
        'e2e_std',
        'sender',
        'real_handler',
        'host_dma',
        'cycles',
    ])
    consume_trials(icmp_baseline_label, trials)
    consume_trials(icmp_combined_label, trials)
    consume_trials(icmp_pspin_label, trials)

    consume_trials(udp_baseline_label, trials)
    consume_trials(udp_combined_label, trials)
    consume_trials(udp_pspin_label, trials)

    data['len'] = data['len'].astype(int)
    data.to_pickle(dat_pkl)

import matplotlib.pyplot as plt
import matplotlib.text as mtext

# https://stackoverflow.com/a/71540238/5520728
class LegendTitle(object):
    def __init__(self, text_props=None):
        self.text_props = text_props or {}
        super(LegendTitle, self).__init__()

    def legend_artist(self, legend, orig_handle, fontsize, handlebox):
        x0, y0 = handlebox.xdescent, handlebox.ydescent
        title = mtext.Text(x0, y0, orig_handle, **self.text_props)
        handlebox.add_artist(title)
        return title

params = {
    'font.family': 'Helvetica Neue',
    'font.weight': 'light',
    'axes.titleweight': 'normal',
    'figure.autolayout': True,
}
plt.rcParams.update(params)

dp: pd.DataFrame = pd.read_pickle(dat_pkl)

# E2E Latency
fig, ax = plt.subplots()

task_dict = {}
for lbl in [icmp_baseline_label, icmp_pspin_label, icmp_combined_label, udp_baseline_label, udp_pspin_label, udp_combined_label]:
    task, setup = lbl.split(' ')

    trial = dp[dp['type'] == lbl]
    trial.plot(x='len', y='e2e', yerr='e2e_std', ax=ax)

    task_dict.setdefault(task, {})[setup] = ax.lines[-1]

ax.grid(which='both')
ax.set_xlabel('Payload Length (B)')
ax.set_ylabel('End-to-End Latency (us)')
ax.get_legend().remove()

graphics, texts = [], []
for idx, (k, kv) in enumerate(task_dict.items()):
    graphics.append(k)
    texts.append('')
    for kk, vv in kv.items():
        graphics.append(vv)
        texts.append(kk)
    
    if idx != len(task_dict) - 1:
        graphics.append('')
        texts.append('')

fig.legend(graphics, texts, handler_map={str: LegendTitle({'fontsize': 11, 'weight': 'normal'})}, loc='center right')
fig.tight_layout(rect=[0, 0, .78, 1])
fig.savefig('p1.pdf')

indices = ['cycles', 'real_handler', 'host_dma', 'sender']
index_labels = ['Syscall', 'Handler', 'Host Proc.', 'Sender']

# stackplot for components
fig, axes = plt.subplots(2, 2, sharey=True, sharex=True)
ax_labels = [[icmp_pspin_label, icmp_combined_label], [udp_pspin_label, udp_combined_label]]
did_labels = False
for ax, lbl in zip(chain(*axes), chain(*ax_labels)):
    ax.grid()
    ax.set_xlabel('Payload Length (B)')
    ax.set_ylabel('Latency (us)')
    ax.set_title(lbl)
    
    trial = dp[dp['type'] == lbl]
    
    host_lbl = icmp_baseline_label if 'ICMP' in lbl else udp_baseline_label
    host_avg = dp[dp['type'] == host_lbl]['e2e'].mean()
    if not did_labels:
        did_labels = True
        ax.stackplot('len', *indices, labels=index_labels, data=trial)
        ax.axhline(y=host_avg, linestyle='--', color='purple', label='Baseline')
    else:
        ax.stackplot('len', *indices, data=trial)
        ax.axhline(y=host_avg, linestyle='--', color='purple')

    # plot error bars of e2e latencies
    ax.errorbar('len', 'e2e', 'e2e_std', data=trial, fmt='none', label=None, ecolor='black')

fig.legend(loc='center right')
fig.tight_layout(rect=[0, 0, .82, 1])
fig.savefig('p2.pdf')